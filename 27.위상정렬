25.위상정렬
순서가 정해져 있는 작업을 차례대로 수행해야 할 때 순서를 결정해주기 위해 사용하는 알고리즘이다.

그래프의 흐름은 사실 조건으로 해석할 수 있다.
순차적으로 어떤 그래프가 형성이 되어있을 때, 일직선상의 하나의 경로를 찾아내기 위한 작업이다.
어떠한 작업을 수행했을 때, 성공적으로 그 답까지 갈 수 있다.

위상정렬은 여러개의 답이 존재할 수 있다는 점에서 좋다.

위상정렬은 두가지 해결책을 낸다는 특징이 있다.
1. 현재 그래프는 위상정렬이 가능한지
2. 위상정렬이 가능하다면, 그 결과는 무엇인지 알려준다.

위상정렬을 수행하는 알고리즘은 1. 스택 이용, 2. 큐이용 이다.
큐를 이용하는 방식이 더 많이 사용된다.

큐를 이용하는 방법.
1. 진입차수가 0인 정점을 큐에 삽입한다. 특정한 노드가 있을 때 그 노드로 들어오는 노드의 갯수를 의미.
2. 큐에서 원소를 꺼내 연결된 모든 간선을 제거한다.
3. 간선 제거 이후에 진입차수가 0이 된 정점을 큐에 삽입한다.
4. 큐가 빌 때 까지 2~3번 과정을 반복한다. 모든 원소를 방문하기 전에 큐가 빈다면 싸이클이 존재하는 것이고, 모든 원소를 방문했다면 큐에서 꺼낸 순서가 그 결과이다.

#include <iostream>
#include <vector>
#include <queue>
#define MAX 10

using namespace std;

int n, inDegree[MAX];
vector<int> a[MAX];

void topologySort() {
	int result[MAX];
	queue<int> q;
	//진입 차수가 0인 노드를 큐에 삽입한다.
	for(int i=1 ; i <= n; i++) {
		if(inDegree[i] == 0) q.push(i);
	} 
	
	for(int i=1; i <= n; i++) {
		//n개를 방문하기 전에 큐가 빈다면 사이클이 발생한 것이다.
		if(q.empty()) {
			printf("사이클 발생");
			return;
		} 
		int x = q.front();
		q.pop();
		result[i] = x;
		for(int i = 0; i < a[x].size(); i++) {
			int y = a[x][i];
			if(--inDegree[y] == 0) {
				q.push(y);
			}
		}
	}
	
	for(int i=1; i<=n;i++) {
		printf("%d ", result[i]);
	}
}

int main(void) {
	n = 7;
	a[1].push_back(2);
	inDegree[2]++;
	a[1].push_back(5);
	inDegree[5]++;
	a[2].push_back(3);
	inDegree[3]++;
	a[3].push_back(4);
	inDegree[4]++;
	a[4].push_back(6);
	inDegree[6]++;
	a[5].push_back(6);
	inDegree[6]++;
	a[6].push_back(7);
	inDegree[7]++;
	
	topologySort();
}

실행결과 : 1 2 5 3 4 6 7
 
위상정렬의 시간 복잡도는 O(V+E)이다. 즉, 정점의 갯수 + 간선의 갯수만큼 소요되므로 매우 빠른 알고리즘 중 하나이다. 
