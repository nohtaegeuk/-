20.이진트리의구현과순회알고리즘

이진트리의 구현과 순회 방식에 대해 알아보자.
가장 많이 사용되는 비선형 자료구조는 이진트리이다. 
왼쪽 오른쪽으로 퍼지는 상태가 비선형 구조이다. 그래프도 비선형구조이다.

데이터의 탐색 속도를 빠르게 하기 위한 자료구조이다.
포인터를 사용해야 한다. 포인터를 이용하게 되면, 특정한 루트에서 자식 노드로 접근하는 것에 용이하다.

이진트리가 더 빠른 탐색을 하는데 유리한 이유는 특정한 데이터를 찾고자 한다면 제일 위에서 항상 반으로 갈라지기 때문에 운이 좋다면 속도를 엄청 줄일 수 있다.
한 번 내려갈 때 마다 1/2씩 검색하는 범위를 없애준다.

실제로 포인터를 구현할 때는 완전 이진트리인 경우가 아닐때가 더 많다.
포인터를 사용해서 이진트리를 만드는 경우 굉장히 유동적으로 트리 자료구조를 활용할 수 있다.

트리에서 데이터를 검색하는 방법은: 전위순회 중위순회 후위순회 총 3가지이다.
전위순회 자기자신이 먼저
중위순회 왼쪽 자식을 먼저
후위순회는 오른쪽 자식을 먼저 >> 계산기를 만들 때 많이 사용

#include <iostream>

using namespace std;

int number = 15;

//하나의 노드 정보를 선언합니다.
typedef struct node *treePointer;
typedef struct node {
	int data;
	treePointer leftChild, rightChild;
}node;

//전위 순회를 구현
void preorder(treePointer ptr) {
	if(ptr) {
		cout << ptr->data << ' ';
		preorder(ptr->leftChild);
		preorder(ptr->rightChild);
	}
} 


//후위  순회를 구현 
void postorder(treePointer ptr) {
	if(ptr) {
		postorder(ptr->leftChild);
		postorder(ptr->rightChild);
		cout << ptr->data << ' ';
	}
} 


//중위  순회를 구현 
void inorder(treePointer ptr) {
	if(ptr) {
		inorder(ptr->leftChild);
		cout << ptr->data << ' ';
		inorder(ptr->rightChild);
	}
} 

int main(void) {
	node nodes[number + 1];
	for(int i=1; i <=number; i++ ) {
		nodes[i].data = i;
		nodes[i].leftChild = NULL;
		nodes[i].rightChild = NULL;
	}
	
	for(int i = 1; i <= number; i++) {
		if(i % 2 == 0) {
			nodes[i / 2].leftChild = &nodes[i];
		} else {
			nodes[i / 2].rightChild = &nodes[i];
		}
	}
	
	preorder(&nodes[1]);
	//inorder(&nodes[1]);
	//postorder(&nodes[1]);
	return 0;
} 

실행결과 : preorder : 1 2 4 8 9 5 10 11 3 6 12 13 7 14 15
          inorder : 8 4 9 2 10 5 11 1 12 6 13 3 14 7 15
           postorder : 8 9 4 10 11 5 2 12 13 6 14 15 7 3 1

