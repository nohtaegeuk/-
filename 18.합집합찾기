합집합 찾기 : Union-Find

대표적인 그래프 알고리즘이다.
서로소 집합 알고리즘이라고도 부른다.
서로 같은 집합이 아닌 것을 찾는것과 흡사한 구조이다.
여러개의 노드가 존재할 떄, 두 개의 노드를 선택해서 현재 이 두 노드가 서로 같은 그래프에 속하는지 판별하는 알고리즘이다.

1과 2를 연결했다고 표현하고 싶을 떄는, 부모를 합치면 된다. 
부모를 합칠 때는 일반적으로 더 작은 값 쪽으로 합친다. 이것을 유니온이라고 한다.

우선 1부터 8까지 1 2 3 4 5 6 7 8이 각각 연결되어 있지 않고 독립된 노드라고 생각해보자.
이 상태에서는 각 노드가 각자 자신을 가리킨다고 생각하면 된다.
만약 여기서 1과 2를 연결해준다면, 1의 노드는 원래 1이고, 2의 부모노드는 1로 변하게 된다.

두번쨰, 2와 3을 연결해준다고 생각해보자. 그렇게 되면 2는 위의 상황떄문에 1를 가리키게 되고. 3은 부모노드 로써 2를 가리키게 된다.

근데 여기서 1과 3은 연결되어 있지만, 서로 부모노드가 다르기 떄문에, 여기서 유니온, 즉 재귀를 이용한 합집합 찾기를 하게 되면 문제를 해결할 수 있다.

#include <stdio.h>

//부모 노드를 찾는 함수 
int getParent(int parent[], int x) {
	if(parent[x] == x) return x;
	return parent[x] = getParent(parent, parent[x]);
}

//두 부모 노드를 합치는 함수
int unionParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if(a < b) parent[b] = a;
	else parent[a] = b;
} 

//같은 부모를 가지는지 확인
int findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if(a == b) return 1;
	return 0;
} 

int main(void) {
	int parent[11];
	for(int i = 0; i <= 10; i++) {
		parent[i] = i;
	}
	
	unionParent(parent, 1,2);
	unionParent(parent, 2,3);
	unionParent(parent, 3,4);
	unionParent(parent, 5,6);
	unionParent(parent, 6,7);
	unionParent(parent, 7,8);
	
	
	printf("1과 5는 연결되어 있나요? %d\n", findParent(parent, 1, 5));
	
	unionParent(parent,1,5);
	
	printf("1과 5는 연결되어 있나요? %d\n", findParent(parent, 1, 5));
	return 0;
}

실행결과 : 1과 5는 연결되어 있나요? 0
          1과 5는 연결되어 있나요? 1
