25.다익스트라알고리즘

대표적인 최단 경로 탐색 알고리즘이다.
흔히 인공위성 gps 소프트웨어에서 가장 많이 사용된다.

다익스트라 알고리즘 같은 경우에는 특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로에 대해 알려준다.
음의 간선의 경우에서는 사용할 수 없다.

다이나믹 프로그래밍으로 분류되기도 하고, 그리디로 분류되기도 한다.

최단거리는 여러개의 최단거리로 이루어져있기 때문이다.
작은 문제가 큰 문제의 부분 집합에 속해있다고 볼 수 있다.
기본적으로 다익스트라는 하나의 최단거리를 구할 때 그 이전까지 구했던 최단 거리 정보를 그대로 사용한다는 특징이 있다.

즉, 다익스트라 알고리즘은 현재까지 알고 있떤 최단 경로를 계속해서 갱신 한다는 의미이다.

1. 출발노드를 설정한다.
2. 출발 노드를 기준으로 각 노드의 최소 비용을 저장한다.
3. 방문하지 않은 노드 중에서 가장 비용이 적은 노드를 선택한다.
4. 해당 노드를 거쳐서 특정한 노드로 가는 경우를 고려하여 최소 비용을 갱신한다.
5. 위 과정에서 3~4번을 반복한다.

실제로 컴퓨터 안에서 처리할 때는 이차원 배열 형태로 처리해야 한다.
특정한 노드를 거쳐서 가는 경우가 더 싸다면 예를들어 1 > 3 : 5  / 1 > 4 > 3 : 4 이럴경우에는 1에서 3으로 바로 가는것보다 4를 거쳐서 가는것이 더 싸다.
이럴경우 1에서 3으로 가는 경우에는 4로 다시 갱신된다.

#include <stdio.h>

int number = 6; //정점의 갯수
int INF = 1000000000; // 무한의 표현을 해봤다 10억.

// 전체 그래프를 초기화합니다.
int a[6][6] = {
	{0, 2, 5 , 1 , INF, INF},
	{2,0,3,2,INF,INF},
	{5,3,0,3,1,5},
	{1,2,3,0,1,INF},
	{INF,INF,1,1,0,2},
	{INF,INF,5,INF,2,0},	
};

bool v[6]; // 방문되었는지 안되었는지 보는 배열, 이미 방문한 노드는 방문하지 않아도 되게 하기 위해. 
int d[6]; // 최단 거리를 저장하는 배열 

// 가장 최소 거리를 가지는 정점을 반환합니다.
int getSmallIndex() {
	int min = INF;
	int index = 0;
	for(int i =0 ; i < number; i ++) {
		if(d[i] < min && !v[i]){ // 방문하지 않은 노드중에서 현재 최솟값보다 더 작은 값을 가지는 거리가 존재한다면. 
			min = d[i];
			index = i;
		}
	}
	return index;
} 

//다익스트라를 수행하는 함수이다.
 void dijkstra(int start) { // 특정한 정점에서 부터 다른 정점으로 가는 최소 거리를 반환해주는. 
 	for(int i = 0; i < number; i++) {
 		d[i] = a[start][i]; // d라는 배열은 결과적으로 가지는 최소 비용이 담기는 배열이다. 시작점으로 부터 계산을 했을때 비용을 말함 
	 }
	 v[start] = true; // 시작점을 출발했다고 알림.
	 for(int i=0; i < number - 2; i++) {
	 	int current = getSmallIndex();
	 	v[current] = true;
	 	for(int j = 0; j < 6; j++) {
	 		if(!v[j]) {
	 			if(d[current] + a[current][j] < d[j]){
	 				d[j] = d[current] + a[current][j]; // 값이 더 작다면 갱신해준다. 
				 }
			 }
		 }
	 } 
	 
	
 } 

int main(void) {
	dijkstra(0);
	for(int i=0; i < number; i++) {
	 	printf("%d ", d[i]);
	}
}
실행결과 : 0 2 3 1 2 4

선형탐색으로 찾는 경우에 N^2이 된다.
힙을 사용하면 시간 복잡도가 단축된다. 힙은 최소나 최대의 값이 항상 최상단에 위치한다는 특징이있다.

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int number = 6;
int INF = 10000000;

vector<pair<int, int> > a[7]; //간선정 보 

int d[7];

void dijkstra(int start){
	d[start] = 0;
	priority_queue<pair<int, int> > pq; //힙구조.
	pq.push(make_pair(start,0));
	//가까운 순서대로 처리하므로 큐를 이용한다. 
	while(!pq.empty()) {
		int current = pq.top().first;
		//짧은 것이 먼저 오도록 음수화 해준다.
		int distance = -pq.top().second;
		pq.pop();
		//최단 거리가 아닌 경우 스킵합니다.
		if(d[current] < distance) continue;
		for(int i=0; i< a[current].size(); i++) {
			//선택된 노드의 인접노드  
			int next = a[current][i].first;
			// 선택된 노드 거쳐서 인접 노드로 가는 비용 
			int nextDistance = distance + a[current][i].second;
			//기존의 최소 비용보다 더 저렴하다면 교체합니다.  
			
			if(nextDistance < d[next]) {
				d[next] = nextDistance;
				pq.push(make_pair(next, -nextDistance));
			}
		} 
	}
}

int main(void) {
	//기본적으로 연결되지 않은 경우 비용은 무한이다.
	for(int i = 1 ; i <= number; i++) {
		d[i] = INF;
	} 
	
	a[1].push_back(make_pair(2,2));
	a[1].push_back(make_pair(3,5));
	a[1].push_back(make_pair(4,1));
	
	a[2].push_back(make_pair(1,2));
	a[2].push_back(make_pair(3,3));
	a[2].push_back(make_pair(4,2));
	
	a[3].push_back(make_pair(1,5));
	a[3].push_back(make_pair(2,3));
	a[3].push_back(make_pair(4,3));
	a[3].push_back(make_pair(5,1));
	a[3].push_back(make_pair(6,5));
	
	a[4].push_back(make_pair(1,1));
	a[4].push_back(make_pair(2,2));
	a[4].push_back(make_pair(3,3));
	a[4].push_back(make_pair(5,1));
	
	a[5].push_back(make_pair(3,1));
	a[5].push_back(make_pair(4,1));
	a[5].push_back(make_pair(6,2));
	
	a[6].push_back(make_pair(3,5));
	a[6].push_back(make_pair(5,2));
	
	dijkstra(1);
	
	//결과를 출력
	for(int i=1; i<=number; i++) {
		printf("%d ", d[i]);
	} 
}
실행결과 : 0 2 3 1 2 4


