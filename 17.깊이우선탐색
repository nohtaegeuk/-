17.깊이우선탐색

깊이 우선 탐색 : 맹목적으로 각 노드를 탐색할 떄 사용이 된다.
너비우선탐색은 큐가 사용되고, 깊이 우선 탐색은 스택이 사용된다.

시작 노드를 스택에 넣어주고 방문처리를 해준다.

1을 스택에 넣어주고 방문처리를 해줌.
스택의 최상단 노드를 확인한다.
최상단 노드에게 방문하지 않은 인접 노드가 있다면, 그 노드를 스택에 넣어주고 방문처리를 해준다.
방문하지 않은 인접 노드가 없다면, 스택에서 최상단 노드를 빼준다.

2를 스택에 넣어줌. 2를 방문처리 해줌.
3을 방문함. 
3은 자기가 방문하지 않은 인접노드 6을 방문
6은 인접노드중 방문하지 않은 7를 방문.

7은 인접노드중 방문하지않은 곳이 없기 때문에 7이 나옴. 6이 나옴. 3이 나옴. 그 후 2가 최상단 노드에 존재

그 후에 2에서 방문하지 않은 노드 4로 가게됨.
4의 인접노드 중 방문하지 않은 노드 5를 방문.

5는 인접노드 중 방문안한 곳이 없기 때문에 5 나옴. 4나옴. 2나옴 .1나옴

방문했던 경로 : 1 - 2 - 3 - 6 - 7 - 4 - 5

#include <iostream>
#include <vector>

using namespace std;

int number = 7;
int c[7];
vector<int> a[8];

void dfs(int x) {
	if(c[x]) return;
	c[x] = true;
	cout << x << ' ';
	
	for(int i = 0; i < a[x].size(); i++) {
		int y = a[x][i];
		dfs(y);
	}
}

int main(void) {
	a[1].push_back(2);
	a[2].push_back(1);
	
	a[1].push_back(3);
	a[3].push_back(1);
	
	a[2].push_back(3);
	a[3].push_back(2);
	
	a[2].push_back(4);
	a[4].push_back(2);
	
	a[2].push_back(5);
	a[5].push_back(2);
	
	a[3].push_back(6);
	a[6].push_back(3);
	
	a[3].push_back(7);
	a[7].push_back(3);
	
	a[4].push_back(5);
	a[5].push_back(4);
	
	a[6].push_back(7);
	a[7].push_back(6);
	
	dfs(1);
	
	return 0;
}

실행결과 : 1 2 3 6 7 4 5
