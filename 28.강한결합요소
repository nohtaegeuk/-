28.강한결합요소

강한 결합 요소란, 강하게 결합된 정점 집합을 의미한다. SCC알고리즘이라고 부른다.
SCC는 '같은 SCC에 속하는 두 정점은 서로 도달이 가능하다'라는 특징이 있다.

SCC에 속하게 되면 서로서로 접근할 수 있다는 특징이 있다.
방향 그래프일 때만 큰 의미가 있다.
scc는 흔히 코사라주 알고리즘과 타잔 알고리즘이 있다.
일반적으로 타잔 알고리즘이 더 유용하다.

타잔 알고리즘은 모든 정점에 대해 DFS를 수행하여 SCC를 찾는 알고리즘이다.
부모로 돌아갈 수 있어야 SCC가 성립된다.

#include <iostream>
#include <vector>
#include <stack>
#define MAX 10001

using namespace std;

int id, d[MAX];
bool finished[MAX];
vector<int> a[MAX];
vector<vector<int> > SCC;
stack<int> s;

int dfs(int x) {
	d[x] = ++id;
	s.push(x); //스택에 자기 자신을 삽입한다.
	
	int parent = d[x];
	for(int i = 0; i < a[x].size(); i++){
		int y = a[x][i];
		// 방문하지 않은 이웃  
		if(d[y] == 0) parent = min(parent, dfs(y));
		// 처리 중인 이웃 
		else if(!finished[y]) parent = min(parent, d[y]);
	} 
	
	if(parent == d[x]) {
		vector<int> scc;
		while(1) {
			int t = s.top();
			s.pop();
			scc.push_back(t);
			finished[t] = true;
			if( t==x ) break;
		}
		SCC.push_back(scc);
	}
	
	return parent;
	
	 
}

int main(void) {
	int v = 11;
	a[1].push_back(2);
	a[2].push_back(3);
	a[3].push_back(1);
	a[4].push_back(2);
	a[4].push_back(5);
	a[5].push_back(7);
	a[6].push_back(5);
	a[7].push_back(6);
	a[8].push_back(5);
	a[8].push_back(9);
	a[9].push_back(10);
	a[10].push_back(11);
	a[11].push_back(3);
	a[11].push_back(8);
	
	for(int i = 1; i <= v; i++) {
		if(d[i] == 0) dfs(i);
	}
	
	printf("SCC의 갯수 : %d\n", SCC.size());
	
	for(int i = 0; i < SCC.size(); i++) {
		printf("%d번 쨰 SCC: ", i+1);
		for(int j = 0; j<SCC[i].size(); j++) {
			printf("%d ",SCC[i][j]);
		} 
		printf("\n");
	}
	
	return 0;
}

SCC의 갯수 : 4
1번 쨰 SCC: 3 2 1
2번 쨰 SCC: 6 7 5
3번 쨰 SCC: 4
4번 쨰 SCC: 11 10 9 8

각 정점에 대해 모든 간선에 대해 하나씩 확인하기 때문에, O(V+E)가 된다.
