11. 힙정렬

힙 정렬은 병합 정렬 과 퀵 정렬 만큼 빠른 정렬이다.
힙 정렬은 사실 정렬 자체로도 의미가 있지만, 고급으로 갈 수록 힙의 개념이 잘 등장한다.

힙 정렬은 힙 트리 구조를 이용하는 정렬 방법이다.

힙응 이용해 데이터를 정리하면 어떨까?

이진 트리를 먼저 알아보자. 이진 트리는 컴퓨터가 데이터를 표현하고자 할 떄 
데이터를 각 노드에 담은 뒤에 노드를 두 개씩 이어 붙이는 구조를 말한다.

트리는 부모에서 자식으로 뻗어나가는 것을 의미한다.
각 정점은 최대 2개 까지 자식을 가질 수 있다.
또 그 자식은 최대 2개의 자식을 또 다시 가질 수 있다.
여기서 트리의 최상단을 루트, 최 하단을 리프라고 한다.

트리라는 것은 말그대로 가지르 뻣어나가는 것 처럼 데이터가 서로 연결되어 있다.
완전 이진트리는
데이터가 왼쪽, 오른쪽 차근차근 들어가는 구조이다. 데이터의 노드가 중간에 비어있지 않고 뺵빽하게 들어서있다.

힙에 대해 알아보자.
힙은 최솟값이나 최댓값을 빠르게 찾아내기 위한 완전 이진 트리를 기반으로 하는 트리이다.
힙에는 최대 힙과 최소 힙이 존재하는데, 최대 힙은 부모 노드가 자식 노드보다 큰 힙이라고 할 수 있다.
일단 힙 정렬을 하기 위해서는 정해진 데이터를 힙 구조를 가지도록 만들어야 한다.
>> 부모가 더 큰 최대 힙. max힙

다만 트리안에서 특정 노드 떄문에 최대 힙이 붕괴되는 경우가 있다.
힙트리구조안에서 어떤 부모노드가 자식노드보다 작은 경우가 있을 수 있다.
이럴 경우에는 힙 생성 알고리즘을 사용하여야 한다.
힙 생성 알고리즘은 하나의 노드에 대해서 수행하는 것이다. 작은 부모노드와 큰 자식노드를 바꾸어 주는것.
이렇게 되면 힙을 유지할 수 있다.

위치를 바꾼 뒤에도, 여전히 자식 노드중 부모노드보다 큰 것이 있다면 또 바꾸어 주어야 한다.
>> 최대 힙을 만드는 방법.

힙 생성 알고리즘의 시간 복잡도는 무엇일까? 
>> 한 번 힙 생성 알고리즘이 수행되는 시간은 힙의 높이와 같기 때문에 logN이라고 할 수 있다.

예를 들어, 힙구조를 만들기 위해서는 실제 힙 구조는 전체 갯수에서 2분의 N개만큼만 보면 된다.
전체 트리를 힙으로 만드는 시간 복잡도는 N / 2 * logN = O(N) 이 된다.

완전 이진 트리는 배열을 사용을 해도 문제가 없다.


#include <stdio.h>

int number = 9;
int heap[9] = {7,6,5,8,3,5,9,1,6};

int main(void) {
	//먼저 전체 트리구조를 최대힙 구조로 바꿉니다. 
	for(int i = 1; i < number; i++) {
		int c = i;
		do{
			int root = (c-1) / 2;
			if(heap[root] < heap[c]) {
				int temp = heap[root];
				heap[root] = heap[c];
				heap[c] = temp;
			}
			
			c = root;
		} while(c != 0);
	}
	
	// 크기를 줄여가며 반복적으로 힙을 구성
	
	for(int i = number -1; i >= 0; i--) {
		int temp = heap[0];
		heap[0] = heap[i];
		heap[i] = temp;
		
		int root = 0;
		int c = 1;
		do{
			c = 2 * root + 1;
			// 자식 중에 더 큰 값을 찾기
			if(heap[c] < heap[c+1] && c < i-1) {
				c++;
			} 
			//루트보다 자식이 더 크다면 교환
			if(heap[root] < heap[c] && c < i) {
				int temp = heap[root];
				heap[root] = heap[c];
				heap[c] = temp;
			} 
			root = c;
		} while( c < i);
	} 
	
	for(int i = 0; i < number; i++) {
		printf("%d ", heap[i]);1 3 5 5 6 6 7 8 9
	}
} 
실행결과 : 1 3 5 5 6 6 7 8 9

----------------------------------
힙정렬은 병합정렬과 다르게 별도로 추가적인 배열이 필요하지 않다는 점에서, 메모리 측면에서 몹시 효율적이다.
그리고 항상 O(N * log N) 시간 복잡도를 보장할 수 있다는 점에서 매우 좋은 알고리즘이다.


