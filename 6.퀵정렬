퀵정렬

#include <stdio.h>

int number = 10;
int data[10] = {1,10,5,8,7,6,4,3,2,9};

void quickSort(int *data, int start, int end){
  if(start >= end) { //원소가 1개인 경우
    return;
  }
  
  int key = start; //피벗값인데, 키는 첫 번째 원소
  int i = start + 1; // i는 왼쪽 출발지점
  int j = end; // j는 오른쪽 출발지점
  int temp;
  
  while( i <= j ) {//엇갈릴 떄 까지 반복
    while(data[i] <= data[key]){ //키 값보다 큰 값을 만날때 까지 오른쪽으로 이동시켜 주겠다
      i++;
    }
    
    while(data[j] >= data[key] && j > start){
      j--
    }
    
    if( i > j ){//현재 엇갈린 상태면 키 값과 교체
      temp = data[j];
      data[j] = data[i];
      data[i] = temp;
    }
  }
  
  quickSort(data,start,j-1);
  quickSort(data,j+1,end);
}
int main(void){

  quickSort(data, 0 , number-1);
  for(int i = 0; i < number; i++){
    printf("%d", data[i]);
  }
}

퀵 정렬은 자기보다 큰 값과 작은 값이 엇갈릴 떄 까지 반복해준다음에 바꿔주는 방식이다.
치명적인 약점은 피벗값을 설정하는 것에 따라서 최악의 경우에는 O(N*N)이 나올 수도 있다.
하지만, 대부분의 경우에서는 퀵정렬이 가장 빠르게 정렬한다.

정렬할 데이터의 특성에 따라 정렬 방법을 선택하여야 한다.
