16. 너비우선탐색

너비 우선 탐색 : 탐색을 할 때 너비를 우선으로 하여 탐색을 수행하는 탐색 알고리즘.

즉, 어떠한 시작점이 있을 떄, 시작점과 가까운 것 위주로 탐색을 시작하겠다를 의미.
너비우선 탐색은 최단 경로를 찾아준다는 점에서, 최단길이를 보장할 때 많이 사용한다.

준비물은 큐이다. 큐는 먼저 들어온 것을 먼저 처리해준다.

먼저 큐에 시작 노드를 넣어준다. 그 후에 방문 처리를 해준다.
그 후, 알고리즘에 따라 bfs를 시작하면 된다.
큐에서 하나의 노드를 꺼내고 해당 노드에 연결된 노드 중 방문하지 않은 노드를 방문하고, 차레대로 큐에 삽입한다.

너비 우선 탐색은 시작노드에서 가까운 것 순서대로 출력이 되어야 한다.
거리가 먼 노드들은 마지막에 이루어진다.

#include <iostream>
#include <queue>
#include <vector>

using namespace std;

int number = 7;
int c[7];
vector<int> a[8];

void bfs(int start) {
	
	queue<int> q;
	q.push(start);
	c[start] = true;
	while(!q.empty()) {
		int x = q.front();
		q.pop();
		printf("%d " , x);
		
		for(int i=0; i < a[x].size(); i++) {
			int y = a[x][i];
			if(!c[y]) {
				q.push(y);
				c[y] = true;
			}
		}
	}
}

int main(void) {
	a[1].push_back(2);
	a[2].push_back(1);
	
	a[1].push_back(3);
	a[3].push_back(1);
	
	a[2].push_back(3);
	a[3].push_back(2);
	
	a[2].push_back(4);
	a[4].push_back(2);
	
	a[2].push_back(5);
	a[5].push_back(2);
	
	a[3].push_back(6);
	a[6].push_back(3);
	
	a[3].push_back(7);
	a[7].push_back(3);
	
	a[4].push_back(5);
	a[5].push_back(4);
	
	a[6].push_back(7);
	a[7].push_back(6);
	
	bfs(1);
	
	return 0;
	
}
실행결과 : 1 2 3 4 5 6 7

