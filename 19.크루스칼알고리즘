19.크루스칼알고리즘

가장 적은 비용으로 모든 노드를 연결하기 위해 사용하는 알고리즘이다.
다시 말해 최소 비용 신장 트리를 만들기 위한 알고리즘이다. 단순하게 노드를 연결해서 모든 노드가 다 하나로 연결되도록 만드는데 적은 비용을 사용하는 것.

노드 : 정점 : 도시 : 그래프에서 동그라미로 표현
간선 : 거리 : 비용 : 그래프에서 선으로 표현

간선 숫자는 노드 숫자에서 1을 뺴준것이다.
노드가 7개면 간선은 6개만 있으면 모든 노드를 다 연결할 수 있다.

핵심 내용 : 간선을 거리가 짧은 순서대로 그래프에 포함시키면 어떨까?

모든 간선 정보를 오름차순으로 정렬한 뒤에 비용이 적은 순서대로 붙이면 됨.
다만, 여기서 최소 비용 신장 트리는 사이클이 발생하면 안된다.
1. 정렬된 순서에 맞게 그래프에 포함시킨다.
2. 포함시키기 전에 사이클 테이블을 확인한다.
3. 사이클을 형성하는 경우 간선에 포함하지 않는다.

사이클이 발생하는지의 여부는 unionfind 알고리즘을 사용한다.

#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm> 
using namespace std;

//부모 노드를 찾는 함수 
int getParent(int parent[], int x) {
	if(parent[x] == x) return x;
	return parent[x] = getParent(parent, parent[x]);
}

//두 부모 노드를 합치는 함수
int unionParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if(a < b) parent[b] = a;
	else parent[a] = b;
} 

//같은 부모를 가지는지 확인
int findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if(a == b) return 1;
	return 0;
} 

//간선 클래스 선언
class Edge {
	public : 
		int node[2];
		int distance;
		Edge(int a, int b, int distance) {
			this->node[0] = a;
			this->node[1] = b;
			this->distance = distance;
		}
		
		bool operator< (Edge &edge) {
			return this->distance < edge.distance;
		}
}; 

int main(void) {
	int n = 7;
	int m = 11;
	
	vector<Edge> v;
	v.push_back(Edge(1,7,12));
	v.push_back(Edge(1,4,28));
	v.push_back(Edge(1,2,67));
	v.push_back(Edge(1,5,17));
	v.push_back(Edge(2,4,24));
	v.push_back(Edge(2,5,62));
	v.push_back(Edge(3,5,20));
	v.push_back(Edge(3,6,37));
	v.push_back(Edge(4,7,13));
	v.push_back(Edge(5,6,45));
	v.push_back(Edge(5,7,73));
	
	sort(v.begin(), v.end());
	//각 정점이 포함된 그래프가 어디인지 저장.
	
	int parent[n];
	for(int i=0; i < n; i++) {
		parent[i] = i;
	} 
	
	int sum = 0;
	for(int i=0; i < v.size(); i++) {
		//사이클이 발생하지 않는 경우 그래프에 포 함 
		if(!findParent(parent, v[i].node[0]-1, v[i].node[1]-1)){
			sum +=v[i].distance;
			unionParent(parent, v[i].node[0]-1, v[i].node[1]-1);			
		}
	}
	
	printf("%d\n", sum);
	
	return 0;
}

실행결과 : 123

